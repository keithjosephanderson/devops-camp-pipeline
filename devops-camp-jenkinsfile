pipeline { 
    agent { 
        label 'jenkins-agent' 
    } 
    environment { 
        PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim() 
        HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com' 
        HARBOR_PROJECT = 'keithjandersonharborproject' 
        APP_IMAGE_NAME = 'app' 
        DB_IMAGE_NAME = 'db' 
    } 
    //TODO("Lab 4 - Artifact Management"): add environment variables 
    stages { 
        stage('Application repository') { 
            steps { 
                echo "Cloning application repository" 
                //TODO("Lab 3 - Introduction to Automated Builds"): add github url 
                sh 'git clone https://github.com/keithjosephanderson/afs-labs-student'
                dir('afs-labs-student') { 
                    script { 
                        env.COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim() 
                    } 
                } 
                //TODO("Lab 4 - Artifact Management"): add COMMIT_HASH variable 
            } 
        } 
        stage('Application docker build') { 
            steps { 
                echo "Building application image" 
                //TODO("Lab 4 - Artifact Management"): build the docker app image 
                
            withCredentials([usernameColonPassword(credentialsId: 'keithjosephandersonharborproject', variable: 'HARBOR-AUTH')]) { 
                script { 
                        sh 'docker build -t $DB_IMAGE_NAME-$COMMIT_HASH -f ./app/Dockerfile ./afs-labs-student' 
                docker.withRegistry('https://$HARBOR_REGISTRY', 'keithjosephandersonharborproject') { 
                            sh 'docker tag $DB_IMAGE_NAME-$COMMIT_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH' 
                            sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH' 
                            } 
                        } 
                    } 
                } 
                post { 
                    always { 
                        echo "Clean local $DB_IMAGE_NAME image" 
                        script { 
                            try { 
                                sh 'docker rmi $DB_IMAGE_NAME-$COMMIT_HASH:latest' 
                                sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'                             
                            } catch (err) { 
                                echo err.getMessage() 
                            } 
                        } 
                    } 
                } 
            }
            //TODO("Lab 4 - Artifact Management"): clean local docker db image 
        
        //TODO("Lab 7 - Automated Security Scans"): add a stage 
        stage('Deploy') { 
            steps { 
                echo "Deployment stage" 
                //TODO("Lab 5 - Deploy to EKS"): deploy docker images 
            } 
        } 
    }
    post { 
        cleanup { 
            echo "Clean workspace" 
            sh 'rm -rf .git ./*' 
        } 
    } 
}
